type User = 
 record {
   bio: opt text;
   createdAt: Time;
   education: List_1;
   email: text;
   experiences: List_2;
   id: text;
   location: opt text;
   name: text;
   portfolio: opt text;
   profilePicture: opt text;
   role: Role;
   skills: List_3;
   updatedAt: Time;
   verified: bool;
 };
type Time = int;
type Skill = 
 record {
   level: text;
   name: text;
 };
type Role = 
 variant {
   Employer;
   JobSeeker;
 };
type Result_7 = 
 variant {
   err: text;
   ok: JobApplication;
 };
type Result_6 = 
 variant {
   err: text;
   ok: Contract;
 };
type Result_5 = 
 variant {
   err: text;
   ok: Dispute;
 };
type Result_4 = 
 variant {
   err: text;
   ok: JobListing;
 };
type Result_3 = 
 variant {
   err: text;
   ok: Rating;
 };
type Result_2 = 
 variant {
   err: text;
   ok: vec MatchScore;
 };
type Result_1 = 
 variant {
   err: text;
   ok: User;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Rating = 
 record {
   comment: opt text;
   createdAt: Time;
   fromUserId: text;
   id: text;
   score: nat;
   toUserId: text;
 };
type MatchScore = 
 record {
   jobId: text;
   matchedSkills: vec text;
   score: float64;
   userId: text;
 };
type List_3 = 
 opt record {
       Skill;
       List_3;
     };
type List_2 = 
 opt record {
       Experience;
       List_2;
     };
type List_1 = 
 opt record {
       Education;
       List_1;
     };
type List = 
 opt record {
       text;
       List;
     };
type JobType = 
 variant {
   Contract;
   Freelance;
   FullTime;
   Internship;
   PartTime;
 };
type JobStatus = 
 variant {
   Closed;
   Filled;
   Open;
 };
type JobListing = 
 record {
   applications: List;
   company: text;
   createdAt: Time;
   deadline: opt Time;
   description: text;
   employerId: text;
   id: text;
   jobType: JobType;
   location: opt text;
   requirements: List;
   salary: opt text;
   skills: List;
   status: JobStatus;
   title: text;
   updatedAt: Time;
 };
type JobApplication = 
 record {
   coverLetter: opt text;
   createdAt: Time;
   id: text;
   jobId: text;
   status: ApplicationStatus;
   updatedAt: Time;
   userId: text;
 };
type Experience = 
 record {
   company: text;
   description: text;
   endDate: opt Time;
   startDate: Time;
   title: text;
 };
type Education = 
 record {
   degree: text;
   endDate: opt Time;
   field: text;
   institution: text;
   startDate: Time;
 };
type DisputeStatus = 
 variant {
   Closed;
   Open;
   Resolved;
   UnderReview;
 };
type Dispute = 
 record {
   contractId: text;
   createdAt: Time;
   description: text;
   id: text;
   raisedByUserId: text;
   resolution: opt text;
   status: DisputeStatus;
   updatedAt: Time;
 };
type ContractStatus = 
 variant {
   Active;
   Cancelled;
   Completed;
   Disputed;
   Draft;
   Pending;
 };
type Contract = 
 record {
   createdAt: Time;
   employeeId: text;
   employerId: text;
   endDate: opt Time;
   id: text;
   jobId: text;
   paymentAmount: nat;
   startDate: Time;
   status: ContractStatus;
   terms: text;
   updatedAt: Time;
 };
type ApplicationStatus = 
 variant {
   Accepted;
   Rejected;
   Reviewing;
   Shortlisted;
   Submitted;
 };
service : {
  addEducation: (userId: text, institution: text, degree: text, field: 
   text, startDate: Time, endDate: opt Time) -> (Result);
  addExperience: (userId: text, title: text, company: text, startDate: 
   Time, endDate: opt Time, description: text) -> (Result);
  addSkill: (userId: text, name: text, level: text) -> (Result);
  calculateAverageRating: (userId: text) -> (opt float64) query;
  changeJobStatus: (id: text, status: JobStatus) -> (Result);
  createApplication: (jobId: text, userId: text, coverLetter: opt text) ->
   (Result_7);
  createContract: (jobId: text, employerId: text, employeeId: text, terms:
   text, paymentAmount: nat, startDate: Time) -> (Result_6);
  createDispute: (contractId: text, raisedByUserId: text, description:
   text) -> (Result_5);
  createJob: (title: text, company: text, employerId: text, description:
   text, requirements: vec text, jobType: JobType, location: opt text,
   salary: opt text, skills: vec text, deadline: opt Time) -> (Result_4);
  createRating: (fromUserId: text, toUserId: text, score: nat, comment:
   opt text) -> (Result_3);
  filterJobsBySkills: (requiredSkills: vec text) -> (vec JobListing) query;
  findMatchingCandidates: (jobId: text, minScore: float64) -> (Result_2);
  findMatchingJobs: (userId: text, minScore: float64) -> (Result_2);
  findMatchingJobsAdvanced: (userId: text, minScore: float64) -> (Result_2);
  getAllJobs: () -> (vec JobListing) query;
  getAllUsers: () -> (vec User) query;
  getApplication: (id: text) -> (opt JobApplication) query;
  getApplicationsByJob: (jobId: text) -> (vec JobApplication) query;
  getApplicationsByUser: (userId: text) -> (vec JobApplication) query;
  getContract: (id: text) -> (opt Contract) query;
  getContractsByEmployee: (employeeId: text) -> (vec Contract) query;
  getContractsByEmployer: (employerId: text) -> (vec Contract) query;
  getDispute: (id: text) -> (opt Dispute) query;
  getDisputesByContract: (contractId: text) -> (vec Dispute) query;
  getDisputesByUser: (userId: text) -> (vec Dispute) query;
  getJob: (id: text) -> (opt JobListing) query;
  getJobsByEmployer: (employerId: text) -> (vec JobListing) query;
  getJobsByStatus: (status: JobStatus) -> (vec JobListing) query;
  getJobsByType: (jobType: JobType) -> (vec JobListing) query;
  getRatingDistribution: (userId: text) -> (vec nat) query;
  getRatingsByUser: (userId: text) -> (vec Rating) query;
  getUser: (id: text) -> (opt User) query;
  getUsersByRole: (role: Role) -> (vec User) query;
  greet: () -> (text) query;
  hasUserApplied: (userId: text, jobId: text) -> (bool) query;
  hasUserRated: (fromUserId: text, toUserId: text) -> (bool) query;
  registerUser: (name: text, email: text, role: Role, portfolio: opt text,
   bio: opt text, location: opt text, profilePicture: opt text) -> (Result_1);
  searchJobs: (searchText: text) -> (vec JobListing) query;
  updateApplicationStatus: (id: text, status: ApplicationStatus) -> (Result);
  updateContractStatus: (id: text, status: ContractStatus) -> (Result);
  updateDisputeStatus: (id: text, status: DisputeStatus, resolution:
   opt text) -> (Result);
  updateJob: (id: text, title: text, company: text, description: text,
   requirements: vec text, jobType: JobType, location: opt text, salary:
   opt text, skills: vec text, status: JobStatus, deadline: opt Time) ->
   (Result);
  updateUser: (id: text, name: text, email: text, portfolio: opt text, bio:
   opt text, location: opt text, profilePicture: opt text) -> (Result);
}
